name: Build + Release + Publish

# Workflow Overview
#
# This workflow is triggered when:
# - A commit is pushed to the master branch that changes Cargo.toml's version
# - A user manually triggers the workflow
#
# If that's so, then we:
# - Determine if we need to release by seeing if there's a git tag with the
#   cargo version. (If that tag exists, we don't need to release, presumably
#   because this workflow has already run.)
# - If we need to release:
#   - Build the project into a binary
#   - Create checksums file
#   - Create a GitHub release with the binary and checksum file as assets
#   - Publish to crates.io

env:
  crate_name: monoff
  target_triple: x86_64-pc-windows-msvc
  artifact_name: assets

on:
  push:
    branches:
      - master
    paths:
      - "Cargo.toml"
  workflow_dispatch:
    # offer option to dry run, such that nothing external to this workflow
    # changes. i.e., no git tag, no release, no publish. helpful for testing
    inputs:
      dry_run:
        description: 'Perform a dry-run, skipping tagging, releasing and publishing?'
        required: false
        default: false
        type: boolean

jobs:
  tag:
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      needs_build: ${{ steps.create_tag.outputs.needs_build }}
      name: ${{ steps.create_tag.outputs.name }}
      cargo_version: ${{ steps.extract_version.outputs.cargo_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-tags: true
          fetch-depth: 0

      - name: Extract version from Cargo.toml
        id: extract_version
        run: |
          CARGO_METADATA=$(cargo metadata --format-version 1 --no-deps)
          CARGO_VERSION=$(echo "${CARGO_METADATA}" | jq -r '.packages[] | select(.name == "${{ env.crate_name }}") | .version')

          if [ -z "${CARGO_VERSION}" ]; then
            echo "CARGO_VERSION should not be empty, likely problem with metadata or jq command"
            exit 1
          fi

          echo "Extracted version: ${CARGO_VERSION}"
          echo "::notice title=Cargo Version::${CARGO_VERSION}"
          echo "cargo_version=${CARGO_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create tag
        id: create_tag
        run: |
          DRY_RUN="${{ inputs.dry_run }}"
          echo "::notice title=Dry Run::${DRY_RUN}"

          # default value
          NEEDS_BUILD=true

          if [ "${DRY_RUN}" != 'true' ]; then
            TAG_NAME="v${{ steps.extract_version.outputs.cargo_version }}"

            REF="refs/tags/${TAG_NAME}"
            if git rev-parse -q --verify "${REF}"; then
              NEEDS_BUILD=false
              echo "Tag v$VERSION already exists, skipping release"
            else
              git config --global user.name "${GITHUB_ACTOR}"
              git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

              git tag -a -m "Release ${TAG_NAME}" "${TAG_NAME}"
              git push origin "${TAG_NAME}"
            fi

          else
            echo "Dry run, using current ref as tag name"
            TAG_NAME="${{ github.sha }}"
          fi

          echo "name=${TAG_NAME}" >> "$GITHUB_OUTPUT"
          echo "::notice title=Tag Name::${TAG_NAME}"

          echo "::notice title=Needs Build::${NEEDS_BUILD}"
          echo "needs_build=${NEEDS_BUILD}" >> "$GITHUB_OUTPUT"

  build:
    needs:
      - tag
    if: needs.tag.outputs.needs_build == 'true'
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      # Below in the `publish_release` step, we make env vars with our source
      # and assets paths. I attempted to do that here too, but the issue with
      # path separators: On Windows, they're single backslashes, and I think
      # when bash sees those, it thinks it's an escape character. So instead,
      # we create them in-environment here -- they should then be properly
      # escaped.
      - name: Setup paths
        id: paths
        run: |
          SOURCE_PATH=${{ github.workspace }}/source
          echo "source_path=${SOURCE_PATH}/source" >> "$GITHUB_OUTPUT"

          ASSETS_PATH=${{ github.workspace }}/assets
          mkdir -p $ASSETS_PATH
          echo "assets_path=${ASSETS_PATH}/assets" >> "$GITHUB_OUTPUT"
      
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.name }}
          path: ${{ steps.paths.outputs.source_path }}

      - name: Add target triple
        run: |
          rustup target add ${{ env.target_triple }}

      - name: Cache cargo registry and target
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ${{ steps.paths.outputs.source_path }}/target/
          key: ${{ env.crate_name }}-${{ needs.tag.outputs.name }}
          restore-keys: |
            ${{ env.crate_name }}-

      - name: Test
        working-directory: ${{ steps.paths.outputs.source_path }}
        run: cargo test --target ${{ env.target_triple }}

      - name: Build
        working-directory: ${{ steps.paths.outputs.source_path }}
        run: cargo build --release --target ${{ env.target_triple }}

      - name: Archive
        id: archive
        run: |
          # the path to the archive we'll create
          ARCHIVE_PATH=${{ steps.paths.outputs.assets_path }}/${{ env.crate_name }}-${{ env.target_triple }}-${{ needs.tag.outputs.name }}.zip
          echo "archive_path=${ARCHIVE_PATH}" >> "$GITHUB_OUTPUT"

          # the filename of the binary
          BINARY_FILENAME=${{ env.crate_name }}.exe

          # the relative path of the directory of the binary
          BINARY_DIR_PATH=${{ steps.paths.outputs.source_path }}/target/${{ env.target_triple }}/release

          # go to the binary dir path, so we don't get directory structure in the archive
          cd $BINARY_DIR_PATH

          # create the archive
          mkdir -p ${{ steps.paths.outputs.assets_path }}
          7z a -mx9 "${ARCHIVE_PATH}" "${BINARY_FILENAME}"

      - name: Generate checksums
        id: gen_checksums
        working-directory: ${{ steps.paths.outputs.assets_path }}
        run: |
          CHECKSUMS_PATH=sha256sums.txt
          sha256sum ${{ steps.archive.outputs.archive_path }} > "${CHECKSUMS_PATH}"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ${{ steps.paths.outputs.assets_path }}

  publish_release:
    permissions:
      contents: write
    if: inputs.dry_run != 'true'
    needs:
      - tag
      - build
    runs-on: ubuntu-latest
    env:
      source_path: ${{ github.workspace }}/source
      assets_path: ${{ github.workspace }}/assets
    steps:   
      - uses: actions/checkout@v4
        with:
          ref: ${{ needs.tag.outputs.name }}
          path: ${{ env.source_path }} 
      
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: ${{ env.assets_path }}

      - name: Create GitHub release
        if: inputs.dry_run != 'true'
        env:
          GH_TOKEN: ${{ github.token }}
        working-directory: ${{ env.source_path }}
        run: |
          TAG_NAME=${{ needs.tag.outputs.name }}
          URL=$(gh release create "${TAG_NAME}" \
            -t "Release ${TAG_NAME}" \
            --verify-tag \
            --generate-notes)
          echo "::notice title=Release URL::${URL}"
          
          gh release upload "${TAG_NAME}" "${{ env.assets_path }}/*"

      - name: Publish to crates.io
        if: inputs.dry_run != 'true'
        working-directory: ${{ env.source_path }}
        run: |
          cargo publish --target ${{ env.target_triple }} --no-verify
          echo "::notice title=crates.io URL::https://crates.io/crates/${{ env.crate_name }}/${{ needs.tag.outputs.cargo_version }}"
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
